package com.virtusa.bankingapp.dao;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.stream.Stream;

import org.junit.jupiter.api.DynamicTest;
import org.junit.jupiter.api.TestFactory;

import com.virtusa.bankingapp.models.Customer;

public class CustomerFacadeTest {
	private CustomerFacade customerFacade;
	
	
	@TestFactory
	Stream<DynamicTest> dynamicTestsForCustomerWorkflows() {
	    List<Customer> inputList = Arrays.asList(
	    		new Customer(new Random().nextInt(10000),
	    				"Parameswari1","Bala1",LocalDate.of(2000+new Random().nextInt(20),
	    						1+new Random().nextInt(10), 
	    						1+new Random().nextInt(25)),true),
	    		new Customer(new Random().nextInt(10000),
	    				"Parameswari2","Bala2",LocalDate.of(2000+new Random().nextInt(20),
	    						1+new Random().nextInt(10), 
	    						1+new Random().nextInt(25)),true),
	    		new Customer(new Random().nextInt(10000),
	    				"Parameswari3","Bala3",LocalDate.of(2000+new Random().nextInt(20),
	    						1+new Random().nextInt(10), 
	    						1+new Random().nextInt(25)),true),
	    		new Customer(new Random().nextInt(10000),
	    				"Parameswari4","Bala4",LocalDate.of(2000+new Random().nextInt(20),
	    						1+new Random().nextInt(10), 
	    						1+new Random().nextInt(25)),true)
	    		);
	        
	    customerFacade = new CustomerImpl();
	    Stream<DynamicTest> saveEmployeeStream = inputList.stream()
	      .map(emp -> DynamicTest.dynamicTest(
	        "saveEmployee: " + emp.toString(), 
	          () -> {
	              Employee returned = dao.save(emp.getId());
	              assertEquals(returned.getId(), emp.getId());
	          }
	    ));
	        
	    Stream<DynamicTest> saveEmployeeWithFirstNameStream 
	      = inputList.stream()
	      .filter(emp -> !emp.getFirstName().isEmpty())
	      .map(emp -> DynamicTest.dynamicTest(
	        "saveEmployeeWithName" + emp.toString(), 
	        () -> {
	            Employee returned = dao.save(emp.getId(), emp.getFirstName());
	            assertEquals(returned.getId(), emp.getId());
	            assertEquals(returned.getFirstName(), emp.getFirstName());
	        }));
	        
	    return Stream.concat(saveEmployeeStream, 
	      saveEmployeeWithFirstNameStream);
	}

}
